apply(plugin: "org.springframework.boot")
apply(plugin: "com.thinkimi.gradle.MybatisGenerator")

dependencies {
    implementation(project(":common"))
    compile("org.projectlombok:lombok:1.18.18")
    annotationProcessor("org.projectlombok:lombok:1.18.18")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.18")
    testCompileOnly("org.projectlombok:lombok:1.18.18")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.postgresql:postgresql:42.2.19")
    compile("org.flywaydb:flyway-core:7.7.0")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile("org.springframework.kafka:spring-kafka")
    testCompile("org.springframework.kafka:spring-kafka-test")
    testCompile("org.scala-lang:scala-library:2.13.5")
    runtimeClasspath("org.springframework.boot:spring-boot-starter-actuator")
    runtimeClasspath("org.springframework.boot:spring-boot-devtools")
}

task copyJarKafkaConsumer(type: Copy) {
    copy {
        from("build/libs/kafka-consumer-0.0.1-SNAPSHOT.jar")
        into("$buildDir/../../project_files/libs")
    }
}

build.finalizedBy(copyJarKafkaConsumer)

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = "src/main/resources/autogen/generatorConfig.xml"

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
        mybatisGenerator("org.mybatis.generator:mybatis-generator-core:1.3.7")
        mybatisGenerator("org.postgresql:postgresql:42.2.6")
    }
}
