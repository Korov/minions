apply plugin: "org.springframework.boot"
apply plugin: "com.thinkimi.gradle.MybatisGenerator"

dependencies {
    compile project(':common')
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.postgresql:postgresql:${postgresVersion}"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}"
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    runtimeClasspath "org.springframework.boot:spring-boot-starter-actuator"
    runtimeClasspath "org.springframework.boot:spring-boot-devtools"
}

task copyJarDemo(type: Copy) {
    copy {
        from "build/libs/demo-0.0.1-SNAPSHOT.jar"
        into "$buildDir/../../project_files/libs"
    }
}

build.finalizedBy(copyJarDemo)

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/autogen/generatorConfig.xml'

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
        mybatisGenerator 'org.postgresql:postgresql:42.2.6'
    }
}
